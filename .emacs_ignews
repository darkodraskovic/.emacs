(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-dictionary-directories (quote ("~/Radovi/Org/Dict")))
 '(ac-dictionary-files nil)
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(auto-save-default nil)
 '(blink-cursor-mode nil)
 '(bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks")
 '(custom-enabled-themes (quote (tsdh-dark)))
 '(custom-safe-themes
   (quote
    ("4cf3221feff536e2b3385209e9b9dc4c2e0818a69a1cdb4b522756bcdf4e00a4" "4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" "8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" "fe20c1ea61a2836a5cea69963865b5b8df8c480ccaf3f11ad7f2e1f543f6c274" "7c4aebe99e804e7b41f34e8e2366cadd61c07977e72e4a0ee9498000a95c5d86" default)))
 '(custom-theme-directory "~/.emacs.d/themes")
 '(dired-dwim-target t)
 '(dired-find-subdir nil)
 '(fci-rule-color "#073642")
 '(global-auto-revert-mode t)
 '(grep-command "grep -nHir -e ")
 '(inhibit-startup-screen t)
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 '(org-agenda-files
   (quote
    ("~/Radovi/Org/Wikidev/Projects/TheVisit.org" "~/Radovi/Org/Admin/TODO.org" "~/Radovi/Org/Wikidev/Projects/AppDevWithPixijs.org")))
 '(org-directory "~/Radovi/Org")
 '(org-export-headline-levels 5)
 '(org-link-frame-setup
   (quote
    ((vm . vm-visit-folder-other-frame)
     (vm-imap . vm-visit-imap-folder-other-frame)
     (gnus . org-gnus-no-new-news)
     (file . find-file)
     (wl . wl-other-frame))))
 '(org-refile-use-outline-path (quote file))
 '(org-src-fontify-natively t)
 '(sentence-end-double-space nil)
 '(smooth-scroll-margin 12)
 '(tool-bar-mode nil)
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#dc322f")
     (40 . "#cb4b16")
     (60 . "#b58900")
     (80 . "#859900")
     (100 . "#2aa198")
     (120 . "#268bd2")
     (140 . "#d33682")
     (160 . "#6c71c4")
     (180 . "#dc322f")
     (200 . "#cb4b16")
     (220 . "#b58900")
     (240 . "#859900")
     (260 . "#2aa198")
     (280 . "#268bd2")
     (300 . "#d33682")
     (320 . "#6c71c4")
     (340 . "#dc322f")
     (360 . "#cb4b16"))))
 '(vc-annotate-very-old-color nil)
 '(yas-indent-line (quote auto)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "outline" :slant normal :weight normal :height 96 :width normal))))
 '(js2-error ((t nil))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MANUAL SETTINGS                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; LOADS
(load "~/Radovi/Org/Dict/my_emacs_abbrev.el")

;; VARIABLES
(setq default-directory "~/Radovi/Org" )
(setq bookmark-save-flag 1)
(setq make-backup-files nil)
(tool-bar-mode -1)
(setq fci-rule-column 80)
(setq global-auto-revert-mode t)

;; tabs&indents
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
;; (setq indent-line-function 'insert-tab)
;; (setq tab-stop-list (number-sequence 4 200 4))

;; switch windows with your shift key by pressing S-<left>, S-<right>, S-<up>, S-<down>
(windmove-default-keybindings)
;; "undo" (and “redo”) changes in the window configuration with the key commands ‘C-c 
(winner-mode 1)

;; (set-cursor-color "#cccccc")

;; split vertically when vising new buffer
(setq split-height-threshold nil)
(setq split-width-threshold 0)

;; GLOBAL KEYBINDINGS
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "M-i") 'imenu)

;; tab
(global-set-key "\C-j" 'newline-and-indent)

;; MODES
;; auto-load major mods
(add-to-list 'auto-mode-alist '("\\.js" . js2-mode))

;; auto-load minor modes
(global-visual-line-mode 1)
;; (electric-pair-mode t)

(setq ido-everywhere t)
(setq ido-enable-flex-matching 1)
(ido-mode t)

;; marmelade, melpa package REPOSITORIES
(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

;; MOVETEXT is extracted from Basic edit toolkit.
;; It allows you to move the current line using M-up / M-down
;; if a region is marked, it will move the region instead.

(require 'move-text)
(move-text-default-bindings)

;; HELM
(require 'helm)
(require 'helm-config)
(helm-mode t)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

;; You have to bind helm-M-x to M-x manually. Otherwise, you still get Helm completion, but using the vanilla M-x that does not provides the above features like showing key bindings and TAB to open built-in documentation.
(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "M-y") 'helm-show-kill-ring)
;; (global-set-key (kbd "C-x c o") 'helm-occur)
(global-set-key (kbd "M-s o") 'helm-occur)
(global-set-key (kbd "M-g s") 'helm-do-grep)

;; Dired
(require 'dired+)
(setq dired-listing-switches "-aBhl  --group-directories-first")

;; Neotree
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)

;; Yasnippet
;; should be loaded before auto complete so that they can work together
;; (require 'yasnippet)
;; (yas-global-mode 1)
;; (yas-reload-all)

;; Auto-complete
(require 'auto-complete-config)
(ac-config-default)
(setq ac-auto-start 3)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")

;; flymake
;; (add-hook 'find-file-hook 'flymake-find-file-hook)

;; HIPPIE
(global-set-key "\M- " 'hippie-expand)
;; completing the name of the file in the buffer. 
;; (fset 'my-complete-file-name
;;       (make-hippie-expand-function '(try-complete-file-name-partially
;; 				     try-complete-file-name)))
;; (global-set-key "\M-\\" 'my-complete-file-name)

;;;;;;;;;;;;;;;;
;; COMMANDS   ;;
;;;;;;;;;;;;;;;;
(transient-mark-mode 1)
(defun select-current-line ()
  "Select the current line"
  (interactive)
  (end-of-line) ; move to end of line
  (set-mark (line-beginning-position)))

(global-set-key "\C-c\C-i" 'select-current-line)

(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(defun duplicate-line-or-region (&optional n)
  "Duplicate current line, or region if active.
With argument N, make N copies.
With negative N, comment out original line and use the absolute value."
  (interactive "*p")
  (let ((use-region (use-region-p)))
    (save-excursion
      (let ((text (if use-region        ;Get region if active, otherwise line
                      (buffer-substring (region-beginning) (region-end))
                    (prog1 (thing-at-point 'line)
                      (end-of-line)
                      (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                          (newline))))))
        (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
          (insert text))))
    (if use-region nil                  ;Only if we're working with a line (not a region)
      (let ((pos (- (point) (line-beginning-position)))) ;Save column
        (if (> 0 n)                             ;Comment out original with negative arg
            (comment-region (line-beginning-position) (line-end-position)))
        (forward-line 1)
        (forward-char pos)))))

(global-set-key [?\C-c ?d] 'duplicate-line-or-region)

(defun copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring"
  (interactive "p")
  (kill-ring-save (line-beginning-position)
                  (line-beginning-position (+ 1 arg)))
  (message "%d line%s copied" arg (if (= 1 arg) "" "s")))

(global-set-key "\C-c\C-k" 'copy-line)

;;;;;;;;;;;;
;; MACROS ;;
;;;;;;;;;;;;

;; IG-NEWS
(fset 'ignews-underscores
   "\C-a__\C-e__")

(fset 'ignews-asterisks
   "\C-a**\C-e**")

(fset 'ignews-parens
   [?\M-h ?\C-n ?\M-% ?\C-q ?\C-j return return ?! return])

(fset 'ignews-youtube-link
      [?\C-a ?\C-s ?: ?\C-m ?\C-y ?\C-r ?= ?\C-m ?\C-f ?\C-  ?\M-b ?\M-b ?\M-b ?\M-b ?\M-b ?\M-b backspace ?\C-e return ?\C-y ?\C-a ?\C-f ?\C-f ?\C-f ?\C-f ?\C-d ?\C-e])


(defun ignews-region-underscore (start end)
  "Insert a markup ____ around a region."
  (interactive "r")
  (save-excursion
    (goto-char end) (insert "__")
    (goto-char start) (insert "__")
    ))

(defun ignews-region-asterisk (start end)
  "Insert a markup **** around a region."
  (interactive "r")
  (save-excursion
    (goto-char end) (insert "**")
    (goto-char start) (insert "**")
    ))

(defun ignews-region-link (start end)
  "Insert a markup ____ around a region."
  (interactive "r")
  (save-excursion
    (goto-char end) (insert "#$]")
    (goto-char start) (insert "[")
    (forward-char 1)
    ))

(defun ignews-region-link-hyper (start end)
  "Insert a markup ____ around a region."
  (interactive "r")
  (save-excursion
    (goto-char end) (insert "$]")
    (goto-char start) (insert "[#")
    ))

(defun ignews-region-remove-newlines ()
  "Removes all newlines in the region."
  (interactive)
  (save-restriction
    (narrow-to-region (point) (mark))
    (goto-char (point-min))
    (while (search-forward "\n" nil t) (replace-match "" nil t))
    (insert "\n")
    ))

(add-hook 'text-mode-hook '(lambda ()
                             ;; macros
                             (local-set-key "\C-c\C-c" 'ignews-underscores)
                             (local-set-key "\C-c\C-s" 'ignews-asterisks)
                             (local-set-key "\C-c\C-p" 'ignews-parens)
                             (local-set-key "\C-c\C-y" 'ignews-youtube-link)
                             ;; funs
                             (local-set-key "\C-c\C-u" 'ignews-region-underscore)                            
                             (local-set-key "\C-c\C-a" 'ignews-region-asterisk)                            
                             (local-set-key "\C-c\C-l" 'ignews-region-link)
                             (local-set-key "\C-c\C-h" 'ignews-region-link-hyper)
                             (local-set-key "\C-c\C-n" 'ignews-region-remove-newlines)
          ))
